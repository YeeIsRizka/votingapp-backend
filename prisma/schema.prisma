// schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Management
model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId // Use ObjectId type for MongoDB
  email           String          @unique
  password        String
  metamaskAddress String?         @unique
  nonce           String?
  role            String // Admin, User
  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @updatedAt
  votes           UserVoteEvent[]
}

// Event
model Event {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId // Use ObjectId type for MongoDB
  title       String
  description String
  isActive    Boolean
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       @updatedAt
  candidates  Candidate[]
  votes       UserVoteEvent[]
}

// Candidate
model Candidate {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId // Use ObjectId type for MongoDB
  eventId  String          @db.ObjectId // Reference the event's id as ObjectId
  photo    String
  name     String
  position String
  visi     String
  misi     String
  comment  String
  sequence Int
  event    Event           @relation(fields: [eventId], references: [id])
  votes    UserVoteEvent[]
}

// UserVoteEvent
model UserVoteEvent {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId // Use ObjectId type for MongoDB
  userAddress String // Reference to user's metamaskAddress
  eventId     String    @db.ObjectId // Reference to event's id
  candidateId String    @db.ObjectId // Reference to candidate's id
  user        User      @relation(fields: [userAddress], references: [metamaskAddress])
  event       Event     @relation(fields: [eventId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}
